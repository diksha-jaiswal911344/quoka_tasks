********************************Exception Handling in Java**************************************

Exception Handling in Java:- Exception handling is a mechanism in Java to handle runtime errors, ensuring smooth program execution without crashing.

1️. Try-Catch Blocks:-The try-catch block is used to handle exceptions. The code that may cause an exception is placed inside the try block, and the
                     catch block handles the exception.

Example:-

public class TryCatchExample {
    public static void main(String[] args) {
        try {
            int result = 10 / 0; // ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }
}
 
2.Finally Block:- The finally block is always executed, whether an exception occurs or not. It is typically used for cleanup operations like closing 
                  database connections or files.

Example:-

public class FinallyExample {
    public static void main(String[] args) {
        try {
            int arr[] = {1, 2, 3};
            System.out.println(arr[5]); // ArrayIndexOutOfBoundsException
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Exception caught: " + e);
        } finally {
            System.out.println("This will always execute!");
        }
    }
}
// output:- Exception caught: java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 3
This will always execute!

3.Throw vs Throws

throw Keyword:- The throw keyword is used to explicitly throw an exception.

Example:-

public class ThrowExample {
    static void checkAge(int age) {
        if (age < 18) {
            throw new ArithmeticException("Access denied – You must be 18 or older.");
        } else {
            System.out.println("Access granted!");
        }
    }

    public static void main(String[] args) {
        checkAge(15); // Throws exception
    }
}

//Output:- Exception in thread "main" java.lang.ArithmeticException: Access denied – You must be 18 or older.

throws Keyword
The throws keyword is used to declare exceptions in a method signature, informing the caller that the method may throw an exception.

Example:-
import java.io.IOException;

public class ThrowsExample {
    static void testMethod() throws IOException {
        throw new IOException("This is an IOException");
    }

    public static void main(String[] args) {
        try {
            testMethod();
        } catch (IOException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }
}

// Output:- Exception caught: This is an IOException

4. Custom Exceptions:- Java allows us to create our own exceptions by extending the Exception or RuntimeException class.

Example:- 

class CustomException extends Exception {
    public CustomException(String message) {
        super(message);
    }
}

public class CustomExceptionExample {
    public static void main(String[] args) {
        try {
            throw new CustomException("This is a custom exception!");
        } catch (CustomException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }
}

//output:- Exception caught: This is a custom exception!

